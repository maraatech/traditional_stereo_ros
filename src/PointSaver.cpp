//--------------------------------------------------
// Implementation code for PointSaver
//
// @author: Wild Boar
//--------------------------------------------------

#include "PointSaver.h"
using namespace Amantis;

//--------------------------------------------------
// Constructors
//--------------------------------------------------

/**
 * Main Constructor
 */
PointSaver::PointSaver()
{
	// Extra implementations can go here!
}

//--------------------------------------------------
// Update Point Set
//--------------------------------------------------

/**
 * Add a new point set to the saver
 * @param pointSet The point set that we are adding
 */
void PointSaver::AddPointSet(vector<ColorPoint> & points)
{
	for (auto point : points) _points.push_back(point);
}

//--------------------------------------------------
// Persistence
//--------------------------------------------------

/**
 * Save the point sets to disk
 * @param path The path that we are saving the point set to
 */
void PointSaver::Save(const string & path)
{
	auto writer = ofstream(path);
	RenderPLYHeader(writer, (int)_points.size());
	RenderPLYBody(writer, _points);
	writer.close();
}

//--------------------------------------------------
// Utility
//--------------------------------------------------

/**
 * Render the header of the PLY file
 * @param writer The writer to render the header with
 * @param pointCount The number of points that are being saved
 */
void PointSaver::RenderPLYHeader(ofstream & writer, int pointCount)
{
	writer << "ply" << endl;
	writer << "format ascii 1.0" << endl;
	writer << "comment Generated by Amantis Vision Ltd" << endl;
	writer << "element vertex " << pointCount << endl;
	writer << "property float x" << endl;
	writer << "property float y" << endl;
	writer << "property float z" << endl;
	writer << "property uchar red" << endl;
	writer << "property uchar green" << endl;
	writer << "property uchar blue" << endl;
	writer << "end_header" << endl;
}

/**
 * Render the body of the point set
 * @param writer The writer to the point set
 * @param point The points that we are writing
 */
void PointSaver::RenderPLYBody(ofstream & writer, vector<ColorPoint> & points)
{
	for (auto point : points) 
	{
		auto &loc = point.GetLocation();
		auto color = point.GetColor();

		char buffer[100];

#ifdef __unix__
		sprintf(buffer, "%f %f %f %i %i %i\n", loc.x, loc.y, loc.z, color[0], color[1], color[2]);
#else
		sprintf_s(buffer, "%f %f %f %i %i %i\n", loc.x, loc.y, loc.z, color[0], color[1], color[2]);
#endif

		writer.write(buffer, strlen(buffer));

	}
}

